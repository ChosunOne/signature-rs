from enum import Enum, auto
from typing import Self, override

class Sort(Enum):
    Lexicographical = auto()
    Topological = auto()

class LyndonWord:
    def __init__(self, letters: list[int]) -> None: ...
    def __mul__(self, rhs: Self) -> Self: ...
    def __lt__(self, other: Self) -> bool: ...
    def __le__(self, other: Self) -> bool: ...
    def __gt__(self, other: Self) -> bool: ...
    def __ge__(self, other: Self) -> bool: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...
    def __len__(self) -> int: ...
    def is_empty(self) -> bool: ...
    def goldberg(self) -> list[int]: ...
    def right_factors(self) -> list[Self]: ...
    def factorize(self) -> tuple[Self, Self]: ...
    @property
    def letters(self) -> list[int]: ...

class LyndonBasis:
    def __init__(self, alphabet_size: int, sort: Sort) -> None: ...
    @property
    def alphabet_size(self) -> int: ...
    @alphabet_size.setter
    def alphabet_size(self, alphabet_size: int) -> None: ...
    @property
    def sort(self) -> Sort: ...
    @sort.setter
    def sort(self, sort: Sort) -> None: ...
    def number_of_words_per_degree(self, max_degree: int) -> list[int]: ...
    def generate_basis(self, max_length: int) -> list[Self]: ...
