from typing import Self

from lie_py import LieSeries
from numpy import float32
from numpy.typing import NDArray

class LogSignature:
    def __getitem__(self, idx: int) -> float: ...
    def __setitem__(self, idx: int, coefficient: float) -> None: ...
    @property
    def series(self) -> LieSeries: ...
    @property
    def bch_series(self) -> LieSeries: ...
    def concatenate(self, other: Self) -> Self: ...
    def concatenate_assign(self, other: Self) -> None: ...

class LogSignatureBuilder:
    def __init__(
        self, max_degree: int | None = None, num_dimensions: int | None = None
    ) -> None: ...
    @property
    def max_degree(self) -> int: ...
    @max_degree.setter
    def max_degree(self, max_degree: int) -> None: ...
    @property
    def num_dimensions(self) -> int: ...
    @num_dimensions.setter
    def num_dimensions(self, num_dimensions: int) -> None: ...
    def build(self) -> LogSignature: ...
    def build_from_path(self, path: NDArray[float32]) -> LogSignature: ...
