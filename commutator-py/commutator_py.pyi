from typing import Self, override

from lyndon_py import LyndonWord

class FormalIndeterminate:
    def __init__(self, coefficient: float, symbols: list[int]) -> None: ...
    @classmethod
    def from_commutator(cls, commutator: CommutatorTerm) -> list[Self]: ...
    def __mul__(self, other: float | Self) -> Self: ...
    def __rmul__(self, other: float | Self) -> Self: ...
    def __neg__(self) -> Self: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...
    @property
    def coefficient(self) -> float: ...
    @coefficient.setter
    def coefficient(self, coefficient: float) -> None: ...
    @property
    def symbols(self) -> list[int]: ...
    @symbols.setter
    def symbols(self, symbols: list[int]) -> None: ...

class CommutatorTerm:
    def __init__(
        self,
        coefficient: float,
        atom: int | None = None,
        left: Self | None = None,
        right: Self | None = None,
    ) -> None: ...
    def __mul__(self, other: float) -> Self: ...
    def __rmul__(self, other: float) -> Self: ...
    def __neg__(self) -> Self: ...
    def __lt__(self, other: Self) -> bool: ...
    def __le__(self, other: Self) -> bool: ...
    def __gt__(self, other: Self) -> bool: ...
    def __ge__(self, other: Self) -> bool: ...
    @override
    def __eq__(self, other: object) -> bool: ...
    @override
    def __hash__(self) -> int: ...
    @property
    def atom(self) -> int | None: ...
    @atom.setter
    def atom(self, atom: int) -> None: ...
    def degree(self) -> int: ...
    @property
    def coefficient(self) -> float: ...
    @coefficient.setter
    def coefficient(self, coefficient: float) -> None: ...
    def commutator(self, rhs: Self) -> Self: ...
    @classmethod
    def from_lyndon_word(cls, lyndon_word: LyndonWord) -> Self: ...
    def formal_indeterminates(self) -> list[FormalIndeterminate]: ...
    def is_zero(self) -> bool: ...
    def jacobi_identity(self) -> tuple[Self, Self] | None: ...
    @property
    def left(self) -> Self | None: ...
    @left.setter
    def left(self, left: Self) -> None: ...
    def lyndon_basis_decomposition(self, lyndon_basis_set: set[Self]) -> list[Self]: ...
    def lyndon_sort(self) -> None: ...
    @property
    def right(self) -> Self | None: ...
    @right.setter
    def right(self, right: Self) -> None: ...
    def unit(self) -> Self: ...
