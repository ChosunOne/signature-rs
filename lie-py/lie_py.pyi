from typing import Self

from commutator_py import CommutatorTerm
from lyndon_py import LyndonBasis, LyndonWord

class LieSeries:
    def __init__(self, basis: list[LyndonWord], coefficients: list[float]) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, idx: int) -> float: ...
    def __setitem__(self, idx: int, coefficient: float) -> None: ...
    def __add__(self, other: Self) -> Self: ...
    def __radd__(self, other: Self) -> Self: ...
    def __iadd__(self, ohter: Self) -> None: ...
    def __sub__(self, other: Self) -> Self: ...
    def __rsub__(self, other: Self) -> Self: ...
    def __isub__(self, other: Self) -> None: ...
    def __mul__(self, other: float) -> Self: ...
    def __rmul__(self, other: float) -> Self: ...
    def __imul__(self, other: float) -> None: ...
    @property
    def basis(self) -> list[LyndonWord]: ...
    @property
    def coefficients(self) -> list[float]: ...
    @property
    def commutator_basis(self) -> list[CommutatorTerm]: ...
    def commutator(self, other: Self) -> Self: ...
    @property
    def max_degree(self) -> int: ...

class BCHSeriesGenerator:
    def __init__(self, basis: LyndonBasis, max_degree: int) -> None: ...
    @property
    def alphabet_size(self) -> int: ...
    @property
    def basis(self) -> list[LyndonWord]: ...
    def generate_goldberg_coefficient_numerators(self) -> list[int]: ...
    def generate_lie_series(self) -> LieSeries: ...
    @property
    def index_of_degree(self) -> list[int]: ...
    @property
    def max_degree(self) -> int: ...
    @property
    def multi_degree(self) -> list[int]: ...
    @property
    def left_factor(self) -> list[int]: ...
    @property
    def right_factor(self) -> list[int]: ...
    @property
    def word_lengths(self) -> list[int]: ...
